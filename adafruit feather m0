#include <lmic.h>

/*******************************************************************************
 * Copyright (c) 2015 Thomas Telkamp and Matthijs Kooijman
 * Adapted for Adafruit feather m0 LoRa by Stefan Huber
 *
 * Permission is hereby granted, free of charge, to anyone
 * obtaining a copy of this document and accompanying files,
 * to do whatever they want with them without any restriction,
 * including, but not limited to, copying, modification and redistribution.
 * NO WARRANTY OF ANY KIND IS PROVIDED.
 *
 * This example sends the actual battery voltage, using frequency and 
 * encryption settings matching those of the The Things Network.
 *
 * This uses OTAA (Over-the-air activation), where where a DevEUI and
 * application key is configured, which are used in an over-the-air
 * activation procedure where a DevAddr and session keys are
 * assigned/generated for use with all further communication.
 *
 * Note: LoRaWAN per sub-band duty-cycle limitation is enforced (1% in
 * g1, 0.1% in g2), but not the TTN fair usage policy (which is probably
 * violated by this sketch when left running for longer)!

 * To use this sketch, first register your application and device with
 * the things network, to set or generate an AppEUI, DevEUI and AppKey.
 * Multiple devices can use the same AppEUI, but each device has its own
 * DevEUI and AppKey.
 *
 * Do not forget to define the radio type correctly in config.h.
 *
 *******************************************************************************/

#include <lmic.h>
#include <hal/hal.h>
#include <SPI.h>
#include <avr/dtostrf.h>
//#include <stdlib.h>

#include "Zanshin_BME680.h"  // Include the BME680 Sensor library


#define VBATPIN A7

// This EUI must be in little-endian format, so least-significant-byte
// first. When copying an EUI from ttnctl output, this means to reverse
// the bytes. For TTN issued EUIs the last bytes should be 0xD5, 0xB3,
// 0x70.
static const u1_t PROGMEM APPEUI[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
void os_getArtEui(u1_t* buf) {
  memcpy_P(buf, APPEUI, 8);
}

// This should also be in little endian format, see above.
static const u1_t PROGMEM DEVEUI[8] = { 0x41, 0x73, 0x06, 0xD0, 0x7E, 0xD5, 0xB3, 0x70 };
void os_getDevEui(u1_t* buf) {
  memcpy_P(buf, DEVEUI, 8);
}

// This key should be in big endian format (or, since it is not really a
// number but a block of memory, endianness does not really apply). In
// practice, a key taken from ttnctl can be copied as-is.
static const u1_t PROGMEM APPKEY[16] = { 0xA1, 0x27, 0x12, 0xF7, 0xBB, 0xCD, 0x06, 0x20, 0x1C, 0xF9, 0x6F, 0x6B, 0xD8, 0x47, 0xBE, 0xA8 };
void os_getDevKey(u1_t* buf) {
  memcpy_P(buf, APPKEY, 16);
}

uint8_t mydata[4];                      // An array of global variables that will store measurement data that will be sent
int32_t temp, humidity, pressure, gas;  // 4 32 bit variables that tempoarily store measurement data,
//since measurement data can only be stored in 32 bit values

static osjob_t sendjob;  // data structure in oslmic.h, creates jobs that do a function in a deadline and have a pointer to next osjob_t instance
BME680_Class BME680;     ///< Create an instance of the BME680 class, it stores sensor settings and gives functions for measuring

// Schedule TX every this many seconds (might become longer due to duty
// cycle limitations).
const unsigned TX_INTERVAL = 60;  // how often should it send data in seconds

// Pin mapping

const lmic_pinmap lmic_pins = {
  // deciding what pins to use for radio modules
  .nss = 8,
  .rxtx = LMIC_UNUSED_PIN,  // this one isn't used
  .rst = LMIC_UNUSED_PIN,   // this one also isn't used
  .dio = { 3, 6, LMIC_UNUSED_PIN },
};

void onEvent(ev_t ev) {          // event handler, when an event happens it returns a number
  switch (ev) {                  // events are enumerated, there are various events for troubleshooting, they are removed to save space
    case EV_JOINED:              // enumeration if device joins the web
      LMIC_setLinkCheckMode(0);  // Turns off link check, so data isn't wasted on checking the connectivity
      break;
    case EV_TXCOMPLETE:  // enumeration if transmition is succesufull

      // Schedule next transmission
      // Uses the adress of formerly declared sendjob and it sets that the function "do_send" will be done in TX_INTERVAL seconds
      os_setTimedCallback(&sendjob, os_getTime() + sec2osticks(TX_INTERVAL), do_send);
      break;
    default:
      // If event is neither one of these 2, do nothing
      break;
  }
}

void do_send(osjob_t* j) {
  // Check if there is not a current TX/RX job running
  if (LMIC.opmode & OP_TXRXPEND) {
  } else {
    // Prepare upstream data transmission at the next possible time.
    BME680.getSensorData(temp, humidity, pressure, gas, true);  // Get readings, it only does readings in integer 32 bit format
    // wert is a unsigned integer of size 8 bits aka 1 char/byte/unsigned short integer. The value can be between 0 and 255
    uint8_t wert = temp / 100;  // temperature is divided by 100 to make it fit under 255
    mydata[0] = wert;           // put value in index 0
    wert = gas / 1000;          // gas resistance in 0.1 mili Ohms
    mydata[1] = wert;
    wert = humidity / 1000;  // puts humidity in percentage 0% to 100%
    mydata[2] = wert;
    wert = pressure / 100 - 870;  // lowest measured
    mydata[3] = wert;

    // schedule data for transmition when the channel is free
    // it will be on port 1, the data sent will be the array "mydata"
    // of size 4 and there will be no confirmation package returned to devices
    LMIC_setTxData2(1, mydata, 4, 0);
  }
  // Next TX is scheduled after TX_COMPLETE event.
}


void setup() {
  Serial.begin(9600);  // Starts serial communication, baud rate is 9600
  // How fast should communication happen and what type of communication should be used (I2C)
  BME680.begin(I2C_STANDARD_MODE);
  // Setting sensors and levels of oversampling. Here the levels are lowest 1x
  BME680.setOversampling(TemperatureSensor, Oversample1);  // Use enumerated type values
  BME680.setOversampling(HumiditySensor, Oversample1);     // Use enumerated type values
  BME680.setOversampling(PressureSensor, Oversample1);     // Use enumerated type values
  // Infinite Impulse Response filter value
  BME680.setIIRFilter(IIR4);  // Use enumerated type values
  // Gas sensor works by heating a small surface and then measuring the gas resistance
  // of volatile compounds in air
  BME680.setGas(320, 150);  // 320ï¿½c for 150 milliseconds
  // starts measuring
  BME680.triggerMeasurement();

  // LMIC initilization
  os_init();
  // Reset the MAC state. Session and pending data transfers will be discarded.
  LMIC_reset();
  LMIC_setClockError(MAX_CLOCK_ERROR * 1 / 100);

  // Start job (sending automatically starts OTAA too)
  do_send(&sendjob);
}

void loop() {
  // This isn't
  os_runloop_once();
}
